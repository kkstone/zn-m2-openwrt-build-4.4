#
# https://github.com/P3TERX/Actions-OpenWrt
#
# File: .github/workflows/openwrt-bulder.yml
# Description: Build OpenWrt using GitHub Actions
#
# Copyright (c) 2019-2024 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

name: zn-m2 docker build

on:
  repository_dispatch:
  workflow_dispatch:
permissions:
  contents: write
  actions: write

env:
  UPLOAD_BIN_DIR: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Docker build
      uses: addnab/docker-run-action@v3
      with:
        image: ghcr.io/openwrt-fork/openwrt-docker-build:main
        options: -v ${{ github.workspace }}:/workdir
        run: |
          cd /workdir
          git clone https://github.com/openwrt-fork/sdf8057-ipq6000.git -b master openwrt
          mv feeds.conf.default openwrt/feeds.conf.default
          mv ./config/zn-m2.config openwrt/.config
          chmod +x ./scripts/zn-m2/*
          cd openwrt 
          ../scripts/zn-m2/diy-part1.sh
          ./scripts/feeds update -a
          ../scripts/zn-m2/diy-part2.sh
          ./scripts/feeds install -a
          ../scripts/zn-m2/diy-part3.sh
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s

    - name: Generate build result
      run: |
        echo "status=success" >> $GITHUB_OUTPUT
        cd openwrt
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: ipq6000${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Generate release tag
      id: tag
      if: env.UPLOAD_RELEASE == 'true'
      run: |
        echo "release_tag=v$(date +"%Y.%m.%d.%H%M")/zn-m2/basic" >> $GITHUB_OUTPUT
        touch release.txt
        echo "ZN-M2 firmware" >> release.txt
        grep luci-app-passwall ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print "Passwall " "`"$2"`"}' >> release.txt
        grep xray-core ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print $2}'| awk -F"-" '{print "Xray " "`"$1"`"}' >> release.txt
        grep sing-box ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print $2}'| awk -F"-" '{print "Sing-Box " "`"$1"`"}' >> release.txt
        grep hysteria ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print $2}'| awk -F"-" '{print "Hysteria " "`"$1"`"}' >> release.txt
        grep chinadns-ng ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print $2}'| awk -F"-" '{print "ChinaDNS-NG " "`"$1"`"}' >> release.txt
        echo "详细包信息请查看 manifest 文件" >> release.txt
        grep luci-app-passwall ${{ env.FIRMWARE }}/openwrt-ipq60xx-generic-device-zn-m2.manifest | awk -F" - " '{print "release_name=Passwall " $2}' >> $GITHUB_OUTPUT
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        name: ${{ steps.tag.outputs.release_name }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: |
         ${{ env.FIRMWARE }}/*.ubi
         ${{ env.FIRMWARE }}/*.bin
         ${{ env.FIRMWARE }}/*.manifest

    - name: Delete releases and workflows runs
      uses: ophub/delete-releases-workflows@main
      with:
        delete_workflows: true
        workflows_keep_day: 3
        gh_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Delete Tags without Release
      uses: Huanyueyichen/delete-tags-without-release-action@v0.2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}